package com.example.moviewatchlist.model;

import jakarta.persistence.*;
import lombok.*;
import java.util.List;

/**
 * Entity class representing a movie in the watchlist.
 * Uses Lombok annotations to reduce boilerplate code.
 * 
 * @author Movie Watchlist Team
 * @version 1.0
 */
@Entity
@Table(name = "movies")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@EqualsAndHashCode(of = {"id", "title"})
@ToString(of = {"id", "title", "releaseYear", "watched", "rating"})
public class Movie {
    
    /**
     * Unique identifier for the movie.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The title of the movie.
     * This field is required and cannot be null.
     */
    @Column(nullable = false)
    private String title;
    
    /**
     * The release year of the movie.
     * Stored as a string to handle various formats.
     */
    @Column(name = "movie_year")
    private String releaseYear;
    
    /**
     * The director of the movie.
     */
    private String director;
    
    /**
     * The genre(s) of the movie.
     * Can contain multiple genres separated by commas.
     */
    private String genre;
    
    /**
     * Short plot summary of the movie.
     */
    private String plot;
    
    /**
     * Runtime of the movie (e.g., "148 min").
     */
    private String runtime;
    
    /**
     * IMDb rating of the movie.
     * Stored as string to preserve original format.
     */
    private String imdbRating;

    /**
     * The Movie Database (TMDb) ID for this movie.
     * Used for fetching additional data from TMDb API.
     */
    private Integer tmdbId;
    
    /**
     * Detailed overview of the movie from TMDb.
     * Can be longer than the plot field.
     */
    @Lob
    private String overview;
    
    /**
     * Release date in ISO format (YYYY-MM-DD).
     */
    private String releaseDate;
    
    /**
     * Average vote score from TMDb.
     */
    private Double voteAverage;

    /**
     * List of local file paths to downloaded movie images.
     * Stored in a separate table with a foreign key relationship.
     */
    @ElementCollection
    @CollectionTable(name = "movie_images", joinColumns = @JoinColumn(name = "movie_id"))
    @Column(name = "image_path")
    private List<String> imagePaths;

    /**
     * List of similar movie titles.
     * Stored in a separate table with a foreign key relationship.
     */
    @ElementCollection
    @CollectionTable(name = "similar_movies", joinColumns = @JoinColumn(name = "movie_id"))
    @Column(name = "similar_movie_title")
    private List<String> similarMovies;

    /**
     * Indicates whether the user has watched this movie.
     * Defaults to false.
     */
    @Builder.Default
    private Boolean watched = false;

    /**
     * User's personal rating for the movie.
     * Valid values are 1-5, or null if not rated.
     */
    @Column(nullable = true)
    private Integer rating;

    /**
     * Gets the release year (alias for getReleaseYear).
     * @return the release year
     * @deprecated Use {@link #getReleaseYear()} instead
     */
    @Deprecated
    public String getYear() { 
        return releaseYear; 
    }
    
    /**
     * Sets the release year (alias for setReleaseYear).
     * @param year the release year
     * @deprecated Use {@link #setReleaseYear(String)} instead
     */
    @Deprecated
    public void setYear(String year) { 
        this.releaseYear = year; 
    }
}